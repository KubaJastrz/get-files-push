#!/bin/bash
#
# Attributions:
# - how to get commits only for specific branch https://stackoverflow.com/q/14848274/6244924
# - how to detect if force-push is needed  https://stackoverflow.com/a/12258773/6244924
# - how to ignore xargs with empty stdout  https://stackoverflow.com/a/8296746/6244924
# - how to list only merge commits  https://stackoverflow.com/a/25986615/6244924
# - how to detect "base branch"  https://stackoverflow.com/a/17843908/6244924
# - how to create local git remote  https://stackoverflow.com/a/34507038/6244924
# - how to detect empty value in shell  https://serverfault.com/a/382740
# - how to trim whitespace for each line  https://unix.stackexchange.com/a/205854
#


# Checks if working branch has a set upstream reference. It is false for first-time push.
function detect_upstream_available() {
  git rev-parse @{upstream} >/dev/null 2>&1
}

# Prints unique files for specified commit hashes
function print_files() {
  git show --name-only --format='' $@ | sort | uniq
}

working_branch=$(git branch --show-current)
diff="$working_branch"

if detect_upstream_available; then
  # Use remote revision for working branch if available. This way we can compare against latest
  # pushed changes only.
  diff="@{upstream}..$working_branch"
fi

# Commits unique to working branch (excluding merge commits)
commits=$(git log --no-merges --first-parent --format='%H' $diff \
  --not $(git for-each-ref --format='%(refname)' refs/heads/ | grep -v "refs/heads/$working_branch")
)

if [ ! -z "$commits" ]; then
  print_files $commits
fi
