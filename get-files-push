#!/bin/sh
#
# Attributions:
# - how to get commits only for specific branch https://stackoverflow.com/q/14848274/6244924
# - how to detect if force-push is needed  https://stackoverflow.com/a/12258773/6244924
# - how to ignore xargs with empty stdout  https://stackoverflow.com/a/8296746/6244924
# - how to list only merge commits  https://stackoverflow.com/a/25986615/6244924
# - how to detect "base branch"  https://stackoverflow.com/a/17843908/6244924
# - how to create local git remote  https://stackoverflow.com/a/34507038/6244924
# - how to detect empty value in shell  https://serverfault.com/a/382740
# - how to trim whitespace for each line  https://unix.stackexchange.com/a/205854
#


# Checks if working branch has a set upstream reference. It is false for first-time push.
detect_upstream_available() {
  git rev-parse @{upstream} >/dev/null 2>&1
}

# Prints unique files for specified commit hashes
print_files() {
  git show --name-only --format='' $@ | sort | uniq | sed "s/^/'/;s/$/'/"
}

default_remote='testing'

log_commits_without_dev() {
  #   --no-merges     = exclude merge commits
  #   --first-parent  = exclude commits added to working_branch by merge commits
  #   --format='%H'   = print only the commit hash
  #   --not $(...)    = exclude commits from branches that are not on remote dev
  git log --no-merges --first-parent --format='%H' "$1" --not "refs/remotes/$default_remote/dev"
}

working_branch=$(git branch --show-current)
commits=""

if detect_upstream_available; then
  # @{upstream}..$working_branch 
  #   All commits reachable by working_branch that are also unreachable by @{upstream}.
  #   This way we can skip commits that are already pushed to remote.
  commits=$(log_commits_without_dev "@{upstream}..$working_branch")
else
  # $working_branch
  #   All commmits in the working_branch up to the initial commit.
  commits=$(log_commits_without_dev "$working_branch")
fi

if [ ! -z "$commits" ]; then
  print_files $commits
fi
